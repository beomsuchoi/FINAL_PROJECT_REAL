// 표지판 검출 부분 (파란색 색상)
cv::Mat sign_roi_mask = cv::Mat::zeros(resized_frame.size(), CV_8UC1);
std::vector<cv::Point> roi_points;
for (int i = 0; i < 4; i++)
{
    roi_points.push_back(cv::Point(signs_vertices[i].x, signs_vertices[i].y));
}
cv::fillConvexPoly(sign_roi_mask, roi_points, cv::Scalar(255));

// HSV 공간에서 파란색 검출
cv::Mat sign_hsv;
cv::cvtColor(resized_frame, sign_hsv, cv::COLOR_BGR2HSV);

// 파란색 마스크 생성 - HSV 값 조정
cv::Mat blue_mask;
// 파란색의 HSV 범위를 더 엄격하게 조정
cv::Scalar lower_blue_hsv(100, 100, 100);  // 채도와 명도의 하한값을 높임
cv::Scalar upper_blue_hsv(130, 255, 255);
cv::inRange(sign_hsv, lower_blue_hsv, upper_blue_hsv, blue_mask);

// 검정색 제외를 위한 추가 마스크
cv::Mat black_mask;
cv::Scalar lower_black_hsv(0, 0, 0);
cv::Scalar upper_black_hsv(180, 30, 30);  // 낮은 채도와 명도를 가진 색상을 검정색으로 간주
cv::inRange(sign_hsv, lower_black_hsv, upper_black_hsv, black_mask);

// 검정색을 제외한 파란색 마스크 생성
cv::bitwise_not(black_mask, black_mask);
cv::bitwise_and(blue_mask, black_mask, blue_mask);

// ROI 영역 내의 파란색만 검출
cv::Mat blue_roi;
cv::bitwise_and(blue_mask, sign_roi_mask, blue_roi);

// 노이즈 제거 - 커널 크기 조정
cv::Mat kernel = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(3, 3));
cv::Mat kernel_large = cv::getStructuringElement(cv::MORPH_RECT, cv::Size(5, 5));
cv::morphologyEx(blue_roi, blue_roi, cv::MORPH_OPEN, kernel);
cv::morphologyEx(blue_roi, blue_roi, cv::MORPH_CLOSE, kernel_large);

// 파란색 영역 검출 - 최소 크기 조정
std::vector<std::vector<cv::Point>> blue_contours;
cv::findContours(blue_roi, blue_contours, cv::RETR_EXTERNAL, cv::CHAIN_APPROX_SIMPLE);

bool blue_sign_detected = false;
for (const auto &contour : blue_contours)
{
    double area = cv::contourArea(contour);
    if (area > 100.0)  // 최소 영역 크기를 증가
    {
        blue_sign_detected = true;
        break;
    }
}

// 파란색 표지판 검출 결과 발행
auto blue_sign_msg = std_msgs::msg::Bool();
blue_sign_msg.data = blue_sign_detected;
blue_sign_detected_pub_->publish(blue_sign_msg);
