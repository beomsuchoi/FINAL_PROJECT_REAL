// 빨간색 검출 부분 추가 (노란색, 흰색 검출하는 부분 근처에 추가)
cv::Mat red_mask_combined;

// HSV 기반 빨간색 검출 (두 범위)
cv::Mat red_mask_hsv1, red_mask_hsv2;
cv::Scalar lower_red_hsv1(0, 100, 100);     // 0도 부근
cv::Scalar upper_red_hsv1(10, 255, 255);
cv::Scalar lower_red_hsv2(160, 100, 100);   // 180도 부근
cv::Scalar upper_red_hsv2(180, 255, 255);

cv::inRange(hsv, lower_red_hsv1, upper_red_hsv1, red_mask_hsv1);
cv::inRange(hsv, lower_red_hsv2, upper_red_hsv2, red_mask_hsv2);
cv::bitwise_or(red_mask_hsv1, red_mask_hsv2, red_mask_combined);

// Lab 기반 빨간색 검출 추가
cv::Mat red_mask_lab;
cv::inRange(lab, cv::Scalar(0, 150, 150), cv::Scalar(255, 255, 140), red_mask_lab);
cv::bitwise_or(red_mask_combined, red_mask_lab, red_mask_combined);

// RGB 기반 빨간색 검출 추가
cv::Mat red_mask_rgb;
cv::inRange(birds_eye_view, cv::Scalar(0, 0, 150), cv::Scalar(100, 100, 255), red_mask_rgb);
cv::bitwise_or(red_mask_combined, red_mask_rgb, red_mask_combined);

// 노이즈 제거
cv::morphologyEx(red_mask_combined, red_mask_combined, cv::MORPH_OPEN, kernel);
cv::morphologyEx(red_mask_combined, red_mask_combined, cv::MORPH_CLOSE, kernel_large);




// Vision.hpp에 추가
private:
    rclcpp::Publisher<sensor_msgs::msg::Image>::SharedPtr red_mask_pub_;

// Vision.cpp 생성자에 추가
Vision::Vision(const std::string &node_name)
    : Node(node_name)
{
    // ... 기존 코드 ...
    red_mask_pub_ = this->create_publisher<sensor_msgs::msg::Image>("/vision/red_mask", 10);
    // ... 기존 코드 ...
}

// 메시지 발행 부분 추가 (다른 mask publish하는 부분 근처에)
sensor_msgs::msg::Image::SharedPtr red_mask_msg =
    cv_bridge::CvImage(msg->header, "mono8", red_mask_combined).toImageMsg();
red_mask_pub_->publish(*red_mask_msg);

// imshow에 red mask 추가
cv::imshow("Red Mask", red_mask_combined);
